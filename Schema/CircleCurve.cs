// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CircleCurve : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CircleCurve __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Aperture { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public FloatVector Position { get { return (new FloatVector()).__assign(__p.bb_pos + 4, __p.bb); } }
  public float Radius { get { return __p.bb.GetFloat(__p.bb_pos + 16); } }
  public FloatVector XDirection { get { return (new FloatVector()).__assign(__p.bb_pos + 20, __p.bb); } }
  public FloatVector YDirection { get { return (new FloatVector()).__assign(__p.bb_pos + 32, __p.bb); } }

  public static Offset<CircleCurve> CreateCircleCurve(FlatBufferBuilder builder, float Aperture, float position_X, float position_Y, float position_Z, float Radius, float x_direction_X, float x_direction_Y, float x_direction_Z, float y_direction_X, float y_direction_Y, float y_direction_Z) {
    builder.Prep(4, 44);
    builder.Prep(4, 12);
    builder.PutFloat(y_direction_Z);
    builder.PutFloat(y_direction_Y);
    builder.PutFloat(y_direction_X);
    builder.Prep(4, 12);
    builder.PutFloat(x_direction_Z);
    builder.PutFloat(x_direction_Y);
    builder.PutFloat(x_direction_X);
    builder.PutFloat(Radius);
    builder.Prep(4, 12);
    builder.PutFloat(position_Z);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    builder.PutFloat(Aperture);
    return new Offset<CircleCurve>(builder.Offset);
  }
}

