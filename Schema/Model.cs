// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Model : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Model GetRootAsModel(ByteBuffer _bb) { return GetRootAsModel(_bb, new Model()); }
  public static Model GetRootAsModel(ByteBuffer _bb, Model obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ModelBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "0001"); }
  public static bool VerifyModel(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("0001", false, ModelVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Model __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Metadata { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMetadataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMetadataArray() { return __p.__vector_as_array<byte>(4); }
  public string Guids(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GuidsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint GuidsItems(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GuidsItemsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetGuidsItemsBytes() { return __p.__vector_as_span<uint>(8, 4); }
#else
  public ArraySegment<byte>? GetGuidsItemsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetGuidsItemsArray() { return __p.__vector_as_array<uint>(8); }
  public uint MaxLocalId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalIds(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int LocalIdsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetLocalIdsBytes() { return __p.__vector_as_span<uint>(12, 4); }
#else
  public ArraySegment<byte>? GetLocalIdsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public uint[] GetLocalIdsArray() { return __p.__vector_as_array<uint>(12); }
  public string Categories(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CategoriesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Meshes? Meshes { get { int o = __p.__offset(16); return o != 0 ? (Meshes?)(new Meshes()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Attribute? Attributes(int j) { int o = __p.__offset(18); return o != 0 ? (Attribute?)(new Attribute()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttributesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Relation? Relations(int j) { int o = __p.__offset(20); return o != 0 ? (Relation?)(new Relation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RelationsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int RelationsItems(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RelationsItemsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRelationsItemsBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetRelationsItemsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetRelationsItemsArray() { return __p.__vector_as_array<int>(22); }
  public string Guid { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGuidBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetGuidBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetGuidArray() { return __p.__vector_as_array<byte>(24); }
  public SpatialStructure? SpatialStructure { get { int o = __p.__offset(26); return o != 0 ? (SpatialStructure?)(new SpatialStructure()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Alignment? Alignments(int j) { int o = __p.__offset(28); return o != 0 ? (Alignment?)(new Alignment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AlignmentsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Geometries? Geometries { get { int o = __p.__offset(30); return o != 0 ? (Geometries?)(new Geometries()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Model> CreateModel(FlatBufferBuilder builder,
      StringOffset metadataOffset = default(StringOffset),
      VectorOffset guidsOffset = default(VectorOffset),
      VectorOffset guids_itemsOffset = default(VectorOffset),
      uint max_local_id = 0,
      VectorOffset local_idsOffset = default(VectorOffset),
      VectorOffset categoriesOffset = default(VectorOffset),
      Offset<Meshes> meshesOffset = default(Offset<Meshes>),
      VectorOffset attributesOffset = default(VectorOffset),
      VectorOffset relationsOffset = default(VectorOffset),
      VectorOffset relations_itemsOffset = default(VectorOffset),
      StringOffset guidOffset = default(StringOffset),
      Offset<SpatialStructure> spatial_structureOffset = default(Offset<SpatialStructure>),
      VectorOffset alignmentsOffset = default(VectorOffset),
      Offset<Geometries> geometriesOffset = default(Offset<Geometries>)) {
    builder.StartTable(14);
    Model.AddGeometries(builder, geometriesOffset);
    Model.AddAlignments(builder, alignmentsOffset);
    Model.AddSpatialStructure(builder, spatial_structureOffset);
    Model.AddGuid(builder, guidOffset);
    Model.AddRelationsItems(builder, relations_itemsOffset);
    Model.AddRelations(builder, relationsOffset);
    Model.AddAttributes(builder, attributesOffset);
    Model.AddMeshes(builder, meshesOffset);
    Model.AddCategories(builder, categoriesOffset);
    Model.AddLocalIds(builder, local_idsOffset);
    Model.AddMaxLocalId(builder, max_local_id);
    Model.AddGuidsItems(builder, guids_itemsOffset);
    Model.AddGuids(builder, guidsOffset);
    Model.AddMetadata(builder, metadataOffset);
    return Model.EndModel(builder);
  }

  public static void StartModel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddMetadata(FlatBufferBuilder builder, StringOffset metadataOffset) { builder.AddOffset(0, metadataOffset.Value, 0); }
  public static void AddGuids(FlatBufferBuilder builder, VectorOffset guidsOffset) { builder.AddOffset(1, guidsOffset.Value, 0); }
  public static VectorOffset CreateGuidsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGuidsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuidsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuidsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuidsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuidsItems(FlatBufferBuilder builder, VectorOffset guidsItemsOffset) { builder.AddOffset(2, guidsItemsOffset.Value, 0); }
  public static VectorOffset CreateGuidsItemsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGuidsItemsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuidsItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuidsItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuidsItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaxLocalId(FlatBufferBuilder builder, uint maxLocalId) { builder.AddUint(3, maxLocalId, 0); }
  public static void AddLocalIds(FlatBufferBuilder builder, VectorOffset localIdsOffset) { builder.AddOffset(4, localIdsOffset.Value, 0); }
  public static VectorOffset CreateLocalIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLocalIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLocalIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCategories(FlatBufferBuilder builder, VectorOffset categoriesOffset) { builder.AddOffset(5, categoriesOffset.Value, 0); }
  public static VectorOffset CreateCategoriesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCategoriesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCategoriesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCategoriesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCategoriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMeshes(FlatBufferBuilder builder, Offset<Meshes> meshesOffset) { builder.AddOffset(6, meshesOffset.Value, 0); }
  public static void AddAttributes(FlatBufferBuilder builder, VectorOffset attributesOffset) { builder.AddOffset(7, attributesOffset.Value, 0); }
  public static VectorOffset CreateAttributesVector(FlatBufferBuilder builder, Offset<Attribute>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, Offset<Attribute>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Attribute>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Attribute>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelations(FlatBufferBuilder builder, VectorOffset relationsOffset) { builder.AddOffset(8, relationsOffset.Value, 0); }
  public static VectorOffset CreateRelationsVector(FlatBufferBuilder builder, Offset<Relation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRelationsVectorBlock(FlatBufferBuilder builder, Offset<Relation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Relation>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Relation>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelationsItems(FlatBufferBuilder builder, VectorOffset relationsItemsOffset) { builder.AddOffset(9, relationsItemsOffset.Value, 0); }
  public static VectorOffset CreateRelationsItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelationsItemsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationsItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationsItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelationsItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuid(FlatBufferBuilder builder, StringOffset guidOffset) { builder.AddOffset(10, guidOffset.Value, 0); }
  public static void AddSpatialStructure(FlatBufferBuilder builder, Offset<SpatialStructure> spatialStructureOffset) { builder.AddOffset(11, spatialStructureOffset.Value, 0); }
  public static void AddAlignments(FlatBufferBuilder builder, VectorOffset alignmentsOffset) { builder.AddOffset(12, alignmentsOffset.Value, 0); }
  public static VectorOffset CreateAlignmentsVector(FlatBufferBuilder builder, Offset<Alignment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAlignmentsVectorBlock(FlatBufferBuilder builder, Offset<Alignment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlignmentsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Alignment>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlignmentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Alignment>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlignmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeometries(FlatBufferBuilder builder, Offset<Geometries> geometriesOffset) { builder.AddOffset(13, geometriesOffset.Value, 0); }
  public static Offset<Model> EndModel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // guids
    builder.Required(o, 8);  // guids_items
    builder.Required(o, 12);  // local_ids
    builder.Required(o, 14);  // categories
    builder.Required(o, 16);  // meshes
    builder.Required(o, 24);  // guid
    return new Offset<Model>(o);
  }
  public static void FinishModelBuffer(FlatBufferBuilder builder, Offset<Model> offset) { builder.Finish(offset.Value, "0001"); }
  public static void FinishSizePrefixedModelBuffer(FlatBufferBuilder builder, Offset<Model> offset) { builder.FinishSizePrefixed(offset.Value, "0001"); }
}


static public class ModelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Metadata*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*Guids*/, true)
      && verifier.VerifyVectorOfData(tablePos, 8 /*GuidsItems*/, 4 /*uint*/, true)
      && verifier.VerifyField(tablePos, 10 /*MaxLocalId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*LocalIds*/, 4 /*uint*/, true)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Categories*/, true)
      && verifier.VerifyTable(tablePos, 16 /*Meshes*/, MeshesVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*Attributes*/, AttributeVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*Relations*/, RelationVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*RelationsItems*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 24 /*Guid*/, true)
      && verifier.VerifyTable(tablePos, 26 /*SpatialStructure*/, SpatialStructureVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 28 /*Alignments*/, AlignmentVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 30 /*Geometries*/, GeometriesVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
