// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Axis : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Axis GetRootAsAxis(ByteBuffer _bb) { return GetRootAsAxis(_bb, new Axis()); }
  public static Axis GetRootAsAxis(ByteBuffer _bb, Axis obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Axis __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Wire? Wires(int j) { int o = __p.__offset(4); return o != 0 ? (Wire?)(new Wire()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int WiresLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint Order(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int OrderLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetOrderBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetOrderBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetOrderArray() { return __p.__vector_as_array<uint>(6); }
  public AxisPartClass Parts(int j) { int o = __p.__offset(8); return o != 0 ? (AxisPartClass)__p.bb.GetSbyte(__p.__vector(o) + j * 1) : (AxisPartClass)0; }
  public int PartsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<AxisPartClass> GetPartsBytes() { return __p.__vector_as_span<AxisPartClass>(8, 1); }
#else
  public ArraySegment<byte>? GetPartsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public AxisPartClass[] GetPartsArray() { int o = __p.__offset(8); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); AxisPartClass[] a = new AxisPartClass[l]; for (int i = 0; i < l; i++) { a[i] = (AxisPartClass)__p.bb.GetSbyte(p + i * 1); } return a; }
  public WireSet? WireSets(int j) { int o = __p.__offset(10); return o != 0 ? (WireSet?)(new WireSet()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WireSetsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CircleCurve? CircleCurves(int j) { int o = __p.__offset(12); return o != 0 ? (CircleCurve?)(new CircleCurve()).__assign(__p.__vector(o) + j * 44, __p.bb) : null; }
  public int CircleCurvesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Axis> CreateAxis(FlatBufferBuilder builder,
      VectorOffset wiresOffset = default(VectorOffset),
      VectorOffset orderOffset = default(VectorOffset),
      VectorOffset partsOffset = default(VectorOffset),
      VectorOffset wire_setsOffset = default(VectorOffset),
      VectorOffset circle_curvesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Axis.AddCircleCurves(builder, circle_curvesOffset);
    Axis.AddWireSets(builder, wire_setsOffset);
    Axis.AddParts(builder, partsOffset);
    Axis.AddOrder(builder, orderOffset);
    Axis.AddWires(builder, wiresOffset);
    return Axis.EndAxis(builder);
  }

  public static void StartAxis(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddWires(FlatBufferBuilder builder, VectorOffset wiresOffset) { builder.AddOffset(0, wiresOffset.Value, 0); }
  public static void StartWiresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 4); }
  public static void AddOrder(FlatBufferBuilder builder, VectorOffset orderOffset) { builder.AddOffset(1, orderOffset.Value, 0); }
  public static VectorOffset CreateOrderVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOrderVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOrderVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOrderVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOrderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParts(FlatBufferBuilder builder, VectorOffset partsOffset) { builder.AddOffset(2, partsOffset.Value, 0); }
  public static VectorOffset CreatePartsVector(FlatBufferBuilder builder, AxisPartClass[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte((sbyte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePartsVectorBlock(FlatBufferBuilder builder, AxisPartClass[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePartsVectorBlock(FlatBufferBuilder builder, ArraySegment<AxisPartClass> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePartsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<AxisPartClass>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddWireSets(FlatBufferBuilder builder, VectorOffset wireSetsOffset) { builder.AddOffset(3, wireSetsOffset.Value, 0); }
  public static VectorOffset CreateWireSetsVector(FlatBufferBuilder builder, Offset<WireSet>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWireSetsVectorBlock(FlatBufferBuilder builder, Offset<WireSet>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWireSetsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WireSet>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWireSetsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WireSet>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWireSetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCircleCurves(FlatBufferBuilder builder, VectorOffset circleCurvesOffset) { builder.AddOffset(4, circleCurvesOffset.Value, 0); }
  public static void StartCircleCurvesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(44, numElems, 4); }
  public static Offset<Axis> EndAxis(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // wires
    builder.Required(o, 6);  // order
    builder.Required(o, 8);  // parts
    builder.Required(o, 10);  // wire_sets
    builder.Required(o, 12);  // circle_curves
    return new Offset<Axis>(o);
  }
}


static public class AxisVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Wires*/, 24 /*Wire*/, true)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Order*/, 4 /*uint*/, true)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Parts*/, 1 /*AxisPartClass*/, true)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*WireSets*/, WireSetVerify.Verify, true)
      && verifier.VerifyVectorOfData(tablePos, 12 /*CircleCurves*/, 44 /*CircleCurve*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}
