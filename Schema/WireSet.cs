// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WireSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WireSet GetRootAsWireSet(ByteBuffer _bb) { return GetRootAsWireSet(_bb, new WireSet()); }
  public static WireSet GetRootAsWireSet(ByteBuffer _bb, WireSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WireSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FloatVector? Ps(int j) { int o = __p.__offset(4); return o != 0 ? (FloatVector?)(new FloatVector()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WireSet> CreateWireSet(FlatBufferBuilder builder,
      VectorOffset psOffset = default(VectorOffset)) {
    builder.StartTable(1);
    WireSet.AddPs(builder, psOffset);
    return WireSet.EndWireSet(builder);
  }

  public static void StartWireSet(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPs(FlatBufferBuilder builder, VectorOffset psOffset) { builder.AddOffset(0, psOffset.Value, 0); }
  public static void StartPsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<WireSet> EndWireSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WireSet>(o);
  }
}


static public class WireSetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Ps*/, 12 /*FloatVector*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
