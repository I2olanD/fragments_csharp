// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Shell : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Shell GetRootAsShell(ByteBuffer _bb) { return GetRootAsShell(_bb, new Shell()); }
  public static Shell GetRootAsShell(ByteBuffer _bb, Shell obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Shell __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ShellProfile? Profiles(int j) { int o = __p.__offset(4); return o != 0 ? (ShellProfile?)(new ShellProfile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ProfilesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ShellHole? Holes(int j) { int o = __p.__offset(6); return o != 0 ? (ShellHole?)(new ShellHole()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int HolesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FloatVector? Points(int j) { int o = __p.__offset(8); return o != 0 ? (FloatVector?)(new FloatVector()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Shell> CreateShell(FlatBufferBuilder builder,
      VectorOffset profilesOffset = default(VectorOffset),
      VectorOffset holesOffset = default(VectorOffset),
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Shell.AddPoints(builder, pointsOffset);
    Shell.AddHoles(builder, holesOffset);
    Shell.AddProfiles(builder, profilesOffset);
    return Shell.EndShell(builder);
  }

  public static void StartShell(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddProfiles(FlatBufferBuilder builder, VectorOffset profilesOffset) { builder.AddOffset(0, profilesOffset.Value, 0); }
  public static VectorOffset CreateProfilesVector(FlatBufferBuilder builder, Offset<ShellProfile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateProfilesVectorBlock(FlatBufferBuilder builder, Offset<ShellProfile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProfilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<ShellProfile>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProfilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<ShellProfile>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProfilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHoles(FlatBufferBuilder builder, VectorOffset holesOffset) { builder.AddOffset(1, holesOffset.Value, 0); }
  public static VectorOffset CreateHolesVector(FlatBufferBuilder builder, Offset<ShellHole>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHolesVectorBlock(FlatBufferBuilder builder, Offset<ShellHole>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHolesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<ShellHole>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHolesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<ShellHole>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHolesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(2, pointsOffset.Value, 0); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Shell> EndShell(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // profiles
    builder.Required(o, 6);  // holes
    builder.Required(o, 8);  // points
    return new Offset<Shell>(o);
  }
}


static public class ShellVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Profiles*/, ShellProfileVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Holes*/, ShellHoleVerify.Verify, true)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Points*/, 12 /*FloatVector*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}
