// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ShellHole : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShellHole GetRootAsShellHole(ByteBuffer _bb) { return GetRootAsShellHole(_bb, new ShellHole()); }
  public static ShellHole GetRootAsShellHole(ByteBuffer _bb, ShellHole obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShellHole __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Indices(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int IndicesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetIndicesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetIndicesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetIndicesArray() { return __p.__vector_as_array<ushort>(4); }
  public ushort ProfileId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<ShellHole> CreateShellHole(FlatBufferBuilder builder,
      VectorOffset indicesOffset = default(VectorOffset),
      ushort profile_id = 0) {
    builder.StartTable(2);
    ShellHole.AddIndices(builder, indicesOffset);
    ShellHole.AddProfileId(builder, profile_id);
    return ShellHole.EndShellHole(builder);
  }

  public static void StartShellHole(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIndices(FlatBufferBuilder builder, VectorOffset indicesOffset) { builder.AddOffset(0, indicesOffset.Value, 0); }
  public static VectorOffset CreateIndicesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, ArraySegment<ushort> data) { builder.StartVector(2, data.Count, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ushort>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIndicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddProfileId(FlatBufferBuilder builder, ushort profileId) { builder.AddUshort(1, profileId, 0); }
  public static Offset<ShellHole> EndShellHole(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // indices
    return new Offset<ShellHole>(o);
  }
}


static public class ShellHoleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Indices*/, 2 /*ushort*/, true)
      && verifier.VerifyField(tablePos, 6 /*ProfileId*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
