// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Material : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte R { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte G { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte B { get { return __p.bb.Get(__p.bb_pos + 2); } }
  public byte A { get { return __p.bb.Get(__p.bb_pos + 3); } }
  public RenderedFaces RenderedFaces { get { return (RenderedFaces)__p.bb.GetSbyte(__p.bb_pos + 4); } }
  public Stroke Stroke { get { return (Stroke)__p.bb.GetSbyte(__p.bb_pos + 5); } }

  public static Offset<Material> CreateMaterial(FlatBufferBuilder builder, byte R, byte G, byte B, byte A, RenderedFaces RenderedFaces, Stroke Stroke) {
    builder.Prep(1, 6);
    builder.PutSbyte((sbyte)Stroke);
    builder.PutSbyte((sbyte)RenderedFaces);
    builder.PutByte(A);
    builder.PutByte(B);
    builder.PutByte(G);
    builder.PutByte(R);
    return new Offset<Material>(builder.Offset);
  }
}

