// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Geometries : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Geometries GetRootAsGeometries(ByteBuffer _bb) { return GetRootAsGeometries(_bb, new Geometries()); }
  public static Geometries GetRootAsGeometries(ByteBuffer _bb, Geometries obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Geometries __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GeometrySample? Samples(int j) { int o = __p.__offset(4); return o != 0 ? (GeometrySample?)(new GeometrySample()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int SamplesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Transform? Transforms(int j) { int o = __p.__offset(6); return o != 0 ? (Transform?)(new Transform()).__assign(__p.__vector(o) + j * 48, __p.bb) : null; }
  public int TransformsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GeometryLines? Lines(int j) { int o = __p.__offset(8); return o != 0 ? (GeometryLines?)(new GeometryLines()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LinesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Geometries> CreateGeometries(FlatBufferBuilder builder,
      VectorOffset samplesOffset = default(VectorOffset),
      VectorOffset transformsOffset = default(VectorOffset),
      VectorOffset linesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Geometries.AddLines(builder, linesOffset);
    Geometries.AddTransforms(builder, transformsOffset);
    Geometries.AddSamples(builder, samplesOffset);
    return Geometries.EndGeometries(builder);
  }

  public static void StartGeometries(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSamples(FlatBufferBuilder builder, VectorOffset samplesOffset) { builder.AddOffset(0, samplesOffset.Value, 0); }
  public static void StartSamplesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddTransforms(FlatBufferBuilder builder, VectorOffset transformsOffset) { builder.AddOffset(1, transformsOffset.Value, 0); }
  public static void StartTransformsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(48, numElems, 8); }
  public static void AddLines(FlatBufferBuilder builder, VectorOffset linesOffset) { builder.AddOffset(2, linesOffset.Value, 0); }
  public static VectorOffset CreateLinesVector(FlatBufferBuilder builder, Offset<GeometryLines>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLinesVectorBlock(FlatBufferBuilder builder, Offset<GeometryLines>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<GeometryLines>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<GeometryLines>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLinesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Geometries> EndGeometries(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // samples
    builder.Required(o, 6);  // transforms
    builder.Required(o, 8);  // lines
    return new Offset<Geometries>(o);
  }
}


static public class GeometriesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Samples*/, 12 /*GeometrySample*/, true)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Transforms*/, 48 /*Transform*/, true)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Lines*/, GeometryLinesVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}
