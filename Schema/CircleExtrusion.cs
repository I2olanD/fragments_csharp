// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CircleExtrusion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CircleExtrusion GetRootAsCircleExtrusion(ByteBuffer _bb) { return GetRootAsCircleExtrusion(_bb, new CircleExtrusion()); }
  public static CircleExtrusion GetRootAsCircleExtrusion(ByteBuffer _bb, CircleExtrusion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CircleExtrusion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Radius(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int RadiusLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetRadiusBytes() { return __p.__vector_as_span<double>(4, 8); }
#else
  public ArraySegment<byte>? GetRadiusBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public double[] GetRadiusArray() { return __p.__vector_as_array<double>(4); }
  public Axis? Axes(int j) { int o = __p.__offset(6); return o != 0 ? (Axis?)(new Axis()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AxesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CircleExtrusion> CreateCircleExtrusion(FlatBufferBuilder builder,
      VectorOffset radiusOffset = default(VectorOffset),
      VectorOffset axesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CircleExtrusion.AddAxes(builder, axesOffset);
    CircleExtrusion.AddRadius(builder, radiusOffset);
    return CircleExtrusion.EndCircleExtrusion(builder);
  }

  public static void StartCircleExtrusion(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRadius(FlatBufferBuilder builder, VectorOffset radiusOffset) { builder.AddOffset(0, radiusOffset.Value, 0); }
  public static VectorOffset CreateRadiusVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRadiusVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadiusVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadiusVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRadiusVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAxes(FlatBufferBuilder builder, VectorOffset axesOffset) { builder.AddOffset(1, axesOffset.Value, 0); }
  public static VectorOffset CreateAxesVector(FlatBufferBuilder builder, Offset<Axis>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAxesVectorBlock(FlatBufferBuilder builder, Offset<Axis>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAxesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Axis>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAxesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Axis>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAxesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CircleExtrusion> EndCircleExtrusion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // radius
    builder.Required(o, 6);  // axes
    return new Offset<CircleExtrusion>(o);
  }
}


static public class CircleExtrusionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Radius*/, 8 /*double*/, true)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Axes*/, AxisVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}
