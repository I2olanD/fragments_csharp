// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Alignment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Alignment GetRootAsAlignment(ByteBuffer _bb) { return GetRootAsAlignment(_bb, new Alignment()); }
  public static Alignment GetRootAsAlignment(ByteBuffer _bb, Alignment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Alignment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Absolute(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int AbsoluteLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetAbsoluteBytes() { return __p.__vector_as_span<uint>(4, 4); }
#else
  public ArraySegment<byte>? GetAbsoluteBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetAbsoluteArray() { return __p.__vector_as_array<uint>(4); }

  public static Offset<Alignment> CreateAlignment(FlatBufferBuilder builder,
      VectorOffset absoluteOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Alignment.AddAbsolute(builder, absoluteOffset);
    return Alignment.EndAlignment(builder);
  }

  public static void StartAlignment(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAbsolute(FlatBufferBuilder builder, VectorOffset absoluteOffset) { builder.AddOffset(0, absoluteOffset.Value, 0); }
  public static VectorOffset CreateAbsoluteVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAbsoluteVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAbsoluteVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAbsoluteVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAbsoluteVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Alignment> EndAlignment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Alignment>(o);
  }
}


static public class AlignmentVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Absolute*/, 4 /*uint*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
